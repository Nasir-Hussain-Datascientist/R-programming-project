# Loading libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(dplyr)
# Loading dataset
accidents_data <- read.csv("RTA Dataset.csv")
# Inspect the dataset
str(accidents_data)
# Droping  the  columns below
columns_to_drop <- c("Time", "Educational_level", "Owner_of_vehicle", "Lanes_or_Medians",
"Types_of_Junction", "Casualty_class", "Sex_of_casualty",
"Age_band_of_casualty", "Casualty_severity", "Work_of_casuality",
"Fitness_of_casuality", "Pedestrian_movement")
# Remove the columns from the dataset
new_accidents_data <- accidents_data[, !(names(accidents_data) %in% columns_to_drop)]
# Check the remaining columns
remaining_columns <- colnames(new_accidents_data)
print("Remaining Columns After Dropping:")
print(remaining_columns)
# Drop rows with missing values
accidents_clean_data <- na.omit(new_accidents_data)
# Count  total number of accidents for each cause
cause_accidents_count <- table(accidents_clean_data$Cause_of_accident)
# Convert the table into a data frame for easier manipulation
cause_accidents_df <- as.data.frame(cause_accidents_count)
colnames(cause_accidents_df) <- c("Cause_of_accident", "Total_Accidents")
# Visualize the count of accidents by cause
library(ggplot2)
ggplot(cause_accidents_df, aes(x = reorder(Cause_of_accident, -Total_Accidents), y = Total_Accidents)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total Number of Accidents by Cause",
x = "Causes of Accident",
y = "Total Number of Accidents") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Rotate x labels for better readability
# Display the result
print(cause_accidents_df)
sex_counts <- table(accidents_clean_data$Sex_of_driver)
ggplot(as.data.frame(sex_counts), aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Accidents by Sex of Driver") +
theme_void()
print(sex_counts)
ggplot(accidents_clean_data, aes(x = Age_band_of_driver)) +
geom_bar(fill = "orange") +
labs(title = "Total Number of Accidents by Age group of Driver", x = "Age Band of Driver", y = "Total Number of Accidents") +
theme_minimal()
# Print total accidents by age band
table(accidents_clean_data$Age_band_of_driver)
# Create a new data frame to count accidents per Driving Experience
accidents_by_driver_experience <- accidents_clean_data %>%
group_by(Driving_experience) %>%
summarize(Number_of_accidents = n())
# Now we create a boxplot (if relevant), here we use geom_boxplot to show distribution
ggplot(accidents_by_driver_experience, aes(x = Driving_experience, y = Number_of_accidents)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Distribution of Accidents by Driving Experience",
x = "Driving Experience",
y = "Number of Accidents") +
theme_minimal()
# Print total accidents by driving experience
table(accidents_clean_data$Driving_experience)
# Group by 'Type_of_vehicle' and count the number of accidents
vehicle_accidents <- accidents_clean_data %>%
group_by(Type_of_vehicle) %>%
summarise(accidents_count = n())
ggplot(vehicle_accidents, aes(x = accidents_count, y = Type_of_vehicle)) +
geom_point(size = 4, color = "blue") +
theme_minimal() +
labs(title = "Distribution of Road Accidents by Vehicle Type",
x = "Number of Accidents", y = "Type of Vehicle")
# View the result
print(vehicle_accidents)
# Create a contingency table for Road Surface Conditions vs Accident Severity
contingency_table <- table(accidents_clean_data$Road_surface_conditions, accidents_clean_data$Accident_severity)
# show the contingency table
print(contingency_table)
# Perform a Chi-squared test
chi_square_test <- chisq.test(contingency_table)
# Visualization - Bar plot
ggplot(accidents_clean_data, aes(x = Road_surface_conditions, fill = Accident_severity)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Correlation Between Road Surface Conditions and Accident Severity",
x = "Road Surface Conditions", y = "Proportion of Accident Severity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# show the Chi-squared test result
print(chi_square_test)
# make a contingency table for Road Alignment vs Accident Severity
contingency_table_alignment <- table(accidents_clean_data$Road_allignment, accidents_clean_data$Accident_severity)
# do a Chi-squared test
chi_square_test_alignment <- chisq.test(contingency_table_alignment)
# Visualization - Bar plot
ggplot(accidents_clean_data, aes(x = Road_allignment, fill = Accident_severity)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Accident Severity by Road Alignment Type",
x = "Road Alignment Type", y = "Proportion of Accident Severity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# View the contingency table
print(contingency_table_alignment)
# Output the Chi-squared test result
print(chi_square_test_alignment)
# make a contingency table for Cause_of_accident and Accident_severity
contingency_table_cause_severity <- table(accidents_clean_data$Cause_of_accident, accidents_clean_data$Accident_severity)
# Perform a Chi-Square test to test for independence between Cause_of_accident and Accident_severity
chisq_test_cause_severity <- chisq.test(contingency_table_cause_severity)
# Load necessary library for visualization
# Create a stacked bar chart to show Accident Severity distribution for each Cause of Accident
ggplot(accidents_clean_data, aes(x = Cause_of_accident, fill = Accident_severity)) +
geom_bar(position = "fill") +  # "fill" makes it a stacked proportion chart
labs(
title = "Distribution of Accident Severity by Cause of Accident",
x = "Cause of Accident",
y = "Proportion",
fill = "Accident Severity"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
plot.title = element_text(hjust = 0.5)  # Center the title
)
# Display the contingency table to view accident severity counts for each cause
contingency_table_cause_severity
# Display the results of the Chi-Square test
chisq_test_cause_severity
# Create a contingency table for Sex_of_driver and Type_of_collision
contingency_table_sex_collision <- table(accidents_clean_data$Sex_of_driver, accidents_clean_data$Type_of_collision)
# Calculate the proportion of each type of collision by sex
prop_sex_collision <- prop.table(contingency_table_sex_collision, 1)
# Plot the data using a bar plot to visualize the proportions
library(ggplot2)
contingency_data <- as.data.frame(prop_sex_collision)
colnames(contingency_data) <- c("Sex_of_driver", "Type_of_collision", "Proportion")
ggplot(contingency_data, aes(x = Type_of_collision, y = Proportion, fill = Sex_of_driver)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportion of Accident Types by Sex of Driver",
x = "Type of Collision",
y = "Proportion of Accidents",
fill = "Sex of Driver") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(contingency_table_sex_collision)
# View the proportions
print(prop_sex_collision)
# Filter out the "Other" and "Unknown" categories from Area_accident_occured
accidents_clean_filtered <- accidents_clean_data %>%
filter(!Area_accident_occured %in% c("Other", "Unknown"))
# Group by 'Day_of_week' and 'Area_accident_occured', and count the number of accidents
accidents_by_day_area <- accidents_clean_filtered %>%
group_by(Day_of_week, Area_accident_occured) %>%
summarise(accident_count = n()) %>%
arrange(desc(accident_count))
# Create a bar plot to visualize accidents by Day_of_week and Area_accident_occured
ggplot(accidents_by_day_area, aes(x = Day_of_week, y = accident_count, fill = Area_accident_occured)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Accidents by Day of the Week and Area of Occurrence ",
x = "Day of the Week",
y = "Number of Accidents",
fill = "Area of Accident Occurrence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Filter out the "Other" and "Unknown" categories from Light_conditions
accidents_clean_filtered_light <- accidents_clean_data %>%
filter(!Light_conditions %in% c("Other", "Unknown"))
# Group by 'Light_conditions' and count the number of accidents
accidents_by_light_condition <- accidents_clean_filtered_light %>%
group_by(Light_conditions) %>%
summarise(accident_count = n()) %>%
arrange(desc(accident_count))
# Create a bar plot to visualize accidents by Light_conditions
ggplot(accidents_by_light_condition, aes(x = Light_conditions, y = accident_count, fill = Light_conditions)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Accidents by Light Conditions",
x = "Light Conditions",
y = "Number of Accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Display descriptive statistics (summary of data)
summary(accidents_by_light_condition)
# Display the first few rows of the result for better understanding
head(accidents_by_light_condition)
